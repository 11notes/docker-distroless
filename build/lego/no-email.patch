diff --git a/cmd/accounts_storage.go b/cmd/accounts_storage.go
index b3e4986d..ea0f214d 100644
--- a/cmd/accounts_storage.go
+++ b/cmd/accounts_storage.go
@@ -58,6 +58,7 @@ const (
 //	     │      └── root accounts directory
 //	     └── "path" option
 type AccountsStorage struct {
+	noEmail         bool
 	userID          string
 	rootPath        string
 	rootUserPath    string
@@ -68,8 +69,14 @@ type AccountsStorage struct {
 
 // NewAccountsStorage Creates a new AccountsStorage.
 func NewAccountsStorage(ctx *cli.Context) *AccountsStorage {
-	// TODO: move to account struct? Currently MUST pass email.
-	email := getEmail(ctx)
+	var userID string
+	noEmail := ctx.IsSet("no-email")
+	if noEmail {
+		userID = "lego"
+	} else {
+		// TODO: move to account struct?
+		userID = getEmail(ctx)
+	}
 
 	serverURL, err := url.Parse(ctx.String(flgServer))
 	if err != nil {
@@ -79,10 +86,11 @@ func NewAccountsStorage(ctx *cli.Context) *AccountsStorage {
 	rootPath := filepath.Join(ctx.String(flgPath), baseAccountsRootFolderName)
 	serverPath := strings.NewReplacer(":", "_", "/", string(os.PathSeparator)).Replace(serverURL.Host)
 	accountsPath := filepath.Join(rootPath, serverPath)
-	rootUserPath := filepath.Join(accountsPath, email)
+	rootUserPath := filepath.Join(accountsPath, userID)
 
 	return &AccountsStorage{
-		userID:          email,
+		userID:          userID,
+		noEmail:         noEmail,
 		rootPath:        rootPath,
 		rootUserPath:    rootUserPath,
 		keysPath:        filepath.Join(rootUserPath, baseKeysFolderName),
@@ -110,6 +118,9 @@ func (s *AccountsStorage) GetRootUserPath() string {
 }
 
 func (s *AccountsStorage) GetUserID() string {
+	if s.noEmail {
+		return "lego"
+	}
 	return s.userID
 }
 
@@ -238,3 +249,4 @@ func tryRecoverRegistration(ctx *cli.Context, privateKey crypto.PrivateKey) (*re
 	}
 	return reg, nil
 }
+
diff --git a/cmd/flags.go b/cmd/flags.go
index 51aa479b..7c4d2b7b 100644
--- a/cmd/flags.go
+++ b/cmd/flags.go
@@ -87,6 +87,12 @@ func CreateFlags(defaultPath string) []cli.Flag {
 			EnvVars: []string{envEmail},
 			Usage:   "Email used for registration and recovery contact.",
 		},
+		&cli.BoolFlag{
+			Name:    "no-email",
+			Aliases: []string{"M"},
+			EnvVars: []string{"LEGO_NO_EMAIL"},
+			Usage:   "Create an ACME request without including an email address.",
+		},
 		&cli.StringFlag{
 			Name:    flgCSR,
 			Aliases: []string{"c"},
diff --git a/cmd/setup.go b/cmd/setup.go
index 28c2c8ee..2f648d9e 100644
--- a/cmd/setup.go
+++ b/cmd/setup.go
@@ -114,7 +114,7 @@ func getKeyType(ctx *cli.Context) certcrypto.KeyType {
 func getEmail(ctx *cli.Context) string {
 	email := ctx.String(flgEmail)
 	if email == "" {
-		log.Fatalf("You have to pass an account (email address) to the program using --%s or -m", flgEmail)
+		log.Fatalf("You have to pass an account (email address) to the program using --email or -m, or use --no-email or -M to disable including an email in the ACME request.", flgEmail)
 	}
 	return email
 }
diff --git a/docs/data/zz_cli_help.toml b/docs/data/zz_cli_help.toml
index 995de5ce..e767e127 100644
--- a/docs/data/zz_cli_help.toml
+++ b/docs/data/zz_cli_help.toml
@@ -23,6 +23,7 @@ GLOBAL OPTIONS:
    --server value, -s value                                     CA hostname (and optionally :port). The server certificate must be trusted in order to avoid further modifications to the client. (default: "https://acme-v02.api.letsencrypt.org/directory") [$LEGO_SERVER]
    --accept-tos, -a                                             By setting this flag to true you indicate that you accept the current Let's Encrypt terms of service. (default: false)
    --email value, -m value                                      Email used for registration and recovery contact. [$LEGO_EMAIL]
+   --no-email, -M                                               Create an ACME request without including an email address. (default: false) [$LEGO_NO_EMAIL]
    --csr value, -c value                                        Certificate signing request filename, if an external CSR is to be used.
    --eab                                                        Use External Account Binding for account registration. Requires --kid and --hmac. (default: false) [$LEGO_EAB]
    --kid value                                                  Key identifier from External CA. Used for External Account Binding. [$LEGO_EAB_KID]
